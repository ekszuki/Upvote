// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.1
// source: pkg/protos/monitors.proto

package monitors

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// VoteMonitorClient is the client API for VoteMonitor service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VoteMonitorClient interface {
	CoinMonitorVotes(ctx context.Context, in *CoinVoteMonitorRequest, opts ...grpc.CallOption) (VoteMonitor_CoinMonitorVotesClient, error)
}

type voteMonitorClient struct {
	cc grpc.ClientConnInterface
}

func NewVoteMonitorClient(cc grpc.ClientConnInterface) VoteMonitorClient {
	return &voteMonitorClient{cc}
}

func (c *voteMonitorClient) CoinMonitorVotes(ctx context.Context, in *CoinVoteMonitorRequest, opts ...grpc.CallOption) (VoteMonitor_CoinMonitorVotesClient, error) {
	stream, err := c.cc.NewStream(ctx, &VoteMonitor_ServiceDesc.Streams[0], "/VoteMonitor/CoinMonitorVotes", opts...)
	if err != nil {
		return nil, err
	}
	x := &voteMonitorCoinMonitorVotesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type VoteMonitor_CoinMonitorVotesClient interface {
	Recv() (*CoinVoteMonitorResponse, error)
	grpc.ClientStream
}

type voteMonitorCoinMonitorVotesClient struct {
	grpc.ClientStream
}

func (x *voteMonitorCoinMonitorVotesClient) Recv() (*CoinVoteMonitorResponse, error) {
	m := new(CoinVoteMonitorResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// VoteMonitorServer is the server API for VoteMonitor service.
// All implementations must embed UnimplementedVoteMonitorServer
// for forward compatibility
type VoteMonitorServer interface {
	CoinMonitorVotes(*CoinVoteMonitorRequest, VoteMonitor_CoinMonitorVotesServer) error
	mustEmbedUnimplementedVoteMonitorServer()
}

// UnimplementedVoteMonitorServer must be embedded to have forward compatible implementations.
type UnimplementedVoteMonitorServer struct {
}

func (UnimplementedVoteMonitorServer) CoinMonitorVotes(*CoinVoteMonitorRequest, VoteMonitor_CoinMonitorVotesServer) error {
	return status.Errorf(codes.Unimplemented, "method CoinMonitorVotes not implemented")
}
func (UnimplementedVoteMonitorServer) mustEmbedUnimplementedVoteMonitorServer() {}

// UnsafeVoteMonitorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VoteMonitorServer will
// result in compilation errors.
type UnsafeVoteMonitorServer interface {
	mustEmbedUnimplementedVoteMonitorServer()
}

func RegisterVoteMonitorServer(s grpc.ServiceRegistrar, srv VoteMonitorServer) {
	s.RegisterService(&VoteMonitor_ServiceDesc, srv)
}

func _VoteMonitor_CoinMonitorVotes_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CoinVoteMonitorRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(VoteMonitorServer).CoinMonitorVotes(m, &voteMonitorCoinMonitorVotesServer{stream})
}

type VoteMonitor_CoinMonitorVotesServer interface {
	Send(*CoinVoteMonitorResponse) error
	grpc.ServerStream
}

type voteMonitorCoinMonitorVotesServer struct {
	grpc.ServerStream
}

func (x *voteMonitorCoinMonitorVotesServer) Send(m *CoinVoteMonitorResponse) error {
	return x.ServerStream.SendMsg(m)
}

// VoteMonitor_ServiceDesc is the grpc.ServiceDesc for VoteMonitor service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VoteMonitor_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "VoteMonitor",
	HandlerType: (*VoteMonitorServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "CoinMonitorVotes",
			Handler:       _VoteMonitor_CoinMonitorVotes_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "pkg/protos/monitors.proto",
}
